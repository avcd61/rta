import os
import asyncio
import discord
from discord import app_commands
from discord.ext import commands
from dotenv import load_dotenv
import yt_dlp
from datetime import datetime, UTC
import random
from collections import deque

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
ytdl_format_options = {
    'format': 'bestaudio',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
    'force-ipv4': True,
    'cachedir': False,
    'prefer_ffmpeg': True
}

ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -analyzeduration 0 -loglevel error',
    'options': '-vn -acodec pcm_s16le -ar 48000 -ac 2 -b:a 192k'
}

# –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä YoutubeDL –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ytdl = yt_dlp.YoutubeDL(ytdl_format_options)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def log_error(error):
    print(f"[ERROR] {datetime.now(UTC)}: {str(error)}")

class MusicQueue:
    def __init__(self):
        self.queue = deque()
        self.current = None
        self.loop = False
        self.volume = 0.5
        self._lock = asyncio.Lock()  # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    async def add(self, track):
        async with self._lock:
            self.queue.append(track)
            return len(self.queue) - 1

    async def next(self):
        async with self._lock:
            if self.loop and self.current:
                return self.current
            if self.queue:
                self.current = self.queue.popleft()
                return self.current
            self.current = None
            return None

    async def shuffle(self):
        async with self._lock:
            queue_list = list(self.queue)
            random.shuffle(queue_list)
            self.queue = deque(queue_list)

    async def clear(self):
        async with self._lock:
            self.queue.clear()
            self.current = None
            self.loop = False

    @property
    def is_empty(self):
        return not self.current and not self.queue

    def get_queue_info(self):
        return {
            'current': self.current,
            'queue_length': len(self.queue),
            'is_looping': self.loop
        }

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
        self.url = data.get('webpage_url', '')
        self.duration = data.get('duration', 0)
        self.thumbnail = data.get('thumbnail', '')
        self.uploader = data.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=True):  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º stream=True
        loop = loop or asyncio.get_event_loop()
        try:
            data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=False))
            
            if not data:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ")

            if 'entries' in data:
                data = data['entries'][0]

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ
            filename = data['url']
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ
            try:
                source = discord.FFmpegPCMAudio(filename, **ffmpeg_options)
                return cls(source, data=data)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ FFmpeg: {str(e)}")
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {str(e)}")

        except Exception as e:
            log_error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            raise Exception(str(e))

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
music_queues = {}

def get_queue(guild_id):
    if guild_id not in music_queues:
        music_queues[guild_id] = MusicQueue()
    return music_queues[guild_id]

def create_music_embed(title, description, color=discord.Color.blue(), thumbnail=None):
    embed = discord.Embed(
        title=title,
        description=description,
        color=color,
        timestamp=datetime.now(UTC)
    )
    if thumbnail:
        embed.set_thumbnail(url=thumbnail)
    embed.set_footer(text="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç")
    return embed

async def check_empty_voice_channel(guild):
    if not guild.voice_client or not guild.voice_client.is_connected():
        return

    if len(guild.voice_client.channel.members) <= 1:
        await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
        if not guild.voice_client or not guild.voice_client.is_connected():
            return
            
        if len(guild.voice_client.channel.members) <= 1:
            try:
                await guild.voice_client.disconnect()
                queue = get_queue(guild.id)
                queue.clear()
                
                # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                text_channel = None
                for channel in guild.text_channels:
                    if channel.permissions_for(guild.me).send_messages:
                        text_channel = channel
                        break
                
                if text_channel:
                    embed = create_music_embed(
                        "üëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ",
                        "–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π",
                        color=discord.Color.red()
                    )
                    await text_channel.send(embed=embed)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")

async def cleanup_player(voice_client):
    try:
        if voice_client and voice_client.is_playing():
            voice_client.stop()
        await asyncio.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–ª–µ–µ—Ä–∞: {e}")

@bot.event
async def on_ready():
    print(f'{bot.user.name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord!')
    print(f'ID –±–æ—Ç–∞: {bot.user.id}')
    print('------')
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.listening,
            name="–º—É–∑—ã–∫—É | /play"
        )
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

async def safe_play(voice_client, player, after_callback):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not voice_client or not voice_client.is_connected():
            raise Exception("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if voice_client.is_playing():
            voice_client.stop()
            await asyncio.sleep(1)

        # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        voice_client.play(player, after=after_callback)
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {str(e)}")
        raise e

@bot.tree.command(name="play", description="–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ –∏–∑ YouTube")
async def play(interaction: discord.Interaction, url: str):
    if not interaction.user.voice:
        await interaction.response.send_message(
            embed=create_music_embed(
                "‚ùå –û—à–∏–±–∫–∞",
                "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!",
                color=discord.Color.red()
            ),
            ephemeral=True
        )
        return

    await interaction.response.defer()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if not interaction.guild.voice_client:
            voice_client = await interaction.user.voice.channel.connect()
        else:
            voice_client = interaction.guild.voice_client
            if voice_client.channel != interaction.user.voice.channel:
                await voice_client.move_to(interaction.user.voice.channel)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not voice_client.is_connected():
            voice_client = await interaction.user.voice.channel.connect()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
        player = await YTDLSource.from_url(url, loop=bot.loop)
        queue = get_queue(interaction.guild_id)
        
        if not voice_client.is_playing():
            await safe_play(
                voice_client, 
                player, 
                lambda e: asyncio.run_coroutine_threadsafe(check_song_end(interaction.guild), bot.loop)
            )
            queue.current = player
            
            embed = create_music_embed(
                "üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                f"**{player.title}**\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {player.uploader}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {player.duration//60}:{player.duration%60:02d}",
                thumbnail=player.thumbnail
            )
            await interaction.followup.send(embed=embed)
        else:
            position = await queue.add(player)
            embed = create_music_embed(
                "üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
                f"**{player.title}**\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {player.uploader}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {player.duration//60}:{player.duration%60:02d}\n"
                f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position + 1}",
                thumbnail=player.thumbnail
            )
            await interaction.followup.send(embed=embed)
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {str(e)}")
        error_message = str(e)
        if "HTTP Error 429" in error_message:
            error_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        elif "Video unavailable" in error_message:
            error_message = "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."
        
        error_embed = create_music_embed(
            "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
            f"```{error_message}```\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            color=discord.Color.red()
        )
        await interaction.followup.send(embed=error_embed)

async def check_song_end(guild):
    queue = get_queue(guild.id)
    if queue.current:
        next_song = await queue.next()
        if next_song:
            guild.voice_client.play(next_song, after=lambda e: asyncio.run_coroutine_threadsafe(
                check_song_end(guild), bot.loop
            ))
            queue.current = next_song
            channel = guild.text_channels[0]
            embed = create_music_embed(
                "üéµ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫",
                f"**{next_song.title}**\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {next_song.uploader}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {next_song.duration//60}:{next_song.duration%60:02d}",
                thumbnail=next_song.thumbnail
            )
            await channel.send(embed=embed)
        else:
            queue.current = None
            await asyncio.sleep(1)
            await check_empty_voice_channel(guild)

@bot.tree.command(name="queue", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
async def queue(interaction: discord.Interaction):
    queue = get_queue(interaction.guild_id)
    
    if queue.is_empty:
        embed = create_music_embed(
            "üìã –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞",
            "–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)
        return
    
    description = ""
    if queue.current:
        description += f"**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:**\n"
        description += f"üéµ {queue.current.title}\n"
        description += f"üë§ {queue.current.uploader}\n\n"
    
    if queue.queue:
        description += "**–û—á–µ—Ä–µ–¥—å:**\n"
        for i, track in enumerate(queue.queue, 1):
            description += f"{i}. {track.title} - {track.uploader}\n"
    
    embed = create_music_embed(
        "üìã –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        description,
        color=discord.Color.blue()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def skip(interaction: discord.Interaction):
    if not interaction.guild.voice_client or not interaction.guild.voice_client.is_playing():
        embed = create_music_embed(
            "‚ùå –û—à–∏–±–∫–∞",
            "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)
        return
    
    interaction.guild.voice_client.stop()
    embed = create_music_embed(
        "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫",
        "–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω",
        color=discord.Color.orange()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="shuffle", description="–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def shuffle(interaction: discord.Interaction):
    queue = get_queue(interaction.guild_id)
    
    if queue.is_empty:
        embed = create_music_embed(
            "‚ùå –û—à–∏–±–∫–∞",
            "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)
        return
    
    await queue.shuffle()
    embed = create_music_embed(
        "üîÄ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ",
        "–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="loop", description="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞")
async def loop(interaction: discord.Interaction):
    queue = get_queue(interaction.guild_id)
    queue.loop = not queue.loop
    
    status = "–≤–∫–ª—é—á–µ–Ω" if queue.loop else "–≤—ã–∫–ª—é—á–µ–Ω"
    embed = create_music_embed(
        "üîÅ –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞",
        f"–ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ {status}",
        color=discord.Color.blue()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="clear", description="–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def clear(interaction: discord.Interaction):
    queue = get_queue(interaction.guild_id)
    await queue.clear()
    
    embed = create_music_embed(
        "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞",
        "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞",
        color=discord.Color.orange()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="pause", description="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ")
async def pause(interaction: discord.Interaction):
    if interaction.guild.voice_client and interaction.guild.voice_client.is_playing():
        interaction.guild.voice_client.pause()
        embed = create_music_embed(
            "‚è∏Ô∏è –ü–∞—É–∑–∞",
            "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            color=discord.Color.orange()
        )
        await interaction.response.send_message(embed=embed)
    else:
        embed = create_music_embed(
            "‚ùå –û—à–∏–±–∫–∞",
            "–ù–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–π –º—É–∑—ã–∫–∏ –¥–ª—è –ø–∞—É–∑—ã",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)

@bot.tree.command(name="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ")
async def resume(interaction: discord.Interaction):
    if interaction.guild.voice_client and interaction.guild.voice_client.is_paused():
        interaction.guild.voice_client.resume()
        embed = create_music_embed(
            "‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
            "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed)
    else:
        embed = create_music_embed(
            "‚ùå –û—à–∏–±–∫–∞",
            "–ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)

@bot.tree.command(name="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def stop(interaction: discord.Interaction):
    if not interaction.guild.voice_client:
        embed = create_music_embed(
            "‚ùå –û—à–∏–±–∫–∞",
            "–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)
        return

    await cleanup_player(interaction.guild.voice_client)
    queue = get_queue(interaction.guild_id)
    await queue.clear()
    
    embed = create_music_embed(
        "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞",
        color=discord.Color.blue()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="volume", description="–†–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å (0-100)")
async def volume(interaction: discord.Interaction, volume: int):
    if interaction.guild.voice_client is None:
        embed = create_music_embed(
            "‚ùå –û—à–∏–±–∫–∞",
            "–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)
    
    volume = max(0, min(100, volume))
    interaction.guild.voice_client.source.volume = volume / 100
    queue = get_queue(interaction.guild_id)
    queue.volume = volume / 100
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    bar_length = 20
    filled = int(volume * bar_length // 100)
    bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)
    
    embed = create_music_embed(
        "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å",
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å: {volume}%\n{bar}",
        color=discord.Color.blue()
    )
    await interaction.response.send_message(embed=embed)

@bot.event
async def on_voice_state_update(member, before, after):
    if member == bot.user:
        if after.channel is None:  # –ë–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω
            guild = before.channel.guild
            await cleanup_player(guild.voice_client)
            queue = get_queue(guild.id)
            await queue.clear()
    elif before.channel and bot.user in before.channel.members:
        await check_empty_voice_channel(before.channel.guild)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN) 